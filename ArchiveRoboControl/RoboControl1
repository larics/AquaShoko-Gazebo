#include <boost/bind.hpp>
#include <gazebo/gazebo.hh>
#include <gazebo/physics/physics.hh>
#include <gazebo/common/common.hh>
#include <stdio.h>
#include <gazebo/common/Time.hh>
#include <boost/filesystem.hpp>
#include <ctime>


bool store = false;
bool home = false;

//PID values Jaw
int ProJaw = 40; //proportional control
int InteJaw = 0; //integral control
int DereJaw = 0; //derivative control
//PID values Pitch #2
int ProPitch1 = 150; //proportional control
int IntePitch1 = 0; //integral control
int DerePitch1 = 50; //derivative control
//PID values Pitch #2
int ProPitch2 = 150; //proportional control
int IntePitch2 = 0; //integral control
int DerePitch2 = 50; //derivative control

//for use in reading joint position			
int p11, p21, p31, p41, 		//jaw joints
		p12, p22, p32, p42, 	//first pitch joint
			p13, p23, p33, p43; 	//end pitch joint

//function check
bool check1 = false;
bool check2 = false;
bool check3 = false;
bool check4 = false;
//final desired position			
bool leg1 = false;
bool leg2 = false; 
bool leg3 = false;
bool leg4 = false;
//leg1 movements
bool pos1 = false;  
bool pos2 = false;
bool pos3 = false;
//leg2 movements
bool pos4 = false;
bool pos5 = false;
bool pos6 = false;
//leg3 movements
bool pos7 = false;
bool pos8 = false;
bool pos9 = false;
//leg4 movements
bool pos10 = false;
bool pos11 = false;
bool pos12 = false;			
						
//Functions
void setJointsPosition();
bool Store();
bool Home();
void getJointPositions();
void printJointPositions();
//void IMUreadAndPrint();

namespace gazebo
{
  class roboControl : public ModelPlugin
  {
  
    public: void Load(physics::ModelPtr _parent, sdf::ElementPtr /*_sdf*/)
    {
		// Store the pointer to the model
		this->model = _parent;
		//Store the pointer to controller
		this->ShokoControl = new physics::JointController(_parent);
		
		// Setup a PID controller
 		this->pid11 = common::PID(ProJaw, InteJaw, DereJaw);
 		this->pid21 = common::PID(ProJaw, InteJaw, DereJaw);
 		this->pid31 = common::PID(ProJaw, InteJaw, DereJaw);
 		this->pid41 = common::PID(ProJaw, InteJaw, DereJaw);
 			this->pid12 = common::PID(ProPitch1, IntePitch1, DerePitch1);
 			this->pid22 = common::PID(ProPitch1, IntePitch1, DerePitch1);
 			this->pid32 = common::PID(ProPitch1, IntePitch1, DerePitch1);
 			this->pid42 = common::PID(ProPitch1, IntePitch1, DerePitch1);
 				this->pid13 = common::PID(ProPitch2, IntePitch2, DerePitch2);
 				this->pid23 = common::PID(ProPitch2, IntePitch2, DerePitch2);
 				this->pid33 = common::PID(ProPitch2, IntePitch2, DerePitch2);
 				this->pid43 = common::PID(ProPitch2, IntePitch2, DerePitch2);
 				
 		this->ID11 = this->model->GetJoint("jaw11");
 		this->ID21 = this->model->GetJoint("jaw21");
 		this->ID31 = this->model->GetJoint("jaw31");
 		this->ID41 = this->model->GetJoint("jaw41");
 			this->ID12 = this->model->GetJoint("pitch12");
 			this->ID22 = this->model->GetJoint("pitch22");
 			this->ID32 = this->model->GetJoint("pitch32");
 			this->ID42 = this->model->GetJoint("pitch42");
 				this->ID13 = this->model->GetJoint("pitch13");
 				this->ID23 = this->model->GetJoint("pitch23");
 				this->ID33 = this->model->GetJoint("pitch33");
 				this->ID43 = this->model->GetJoint("pitch43");

 		this->model->GetJointController()->SetPositionPID(this->ID11->GetScopedName(), this->pid11);
  		this->model->GetJointController()->SetPositionPID(this->ID21->GetScopedName(), this->pid21);
		this->model->GetJointController()->SetPositionPID(this->ID31->GetScopedName(), this->pid31);
		this->model->GetJointController()->SetPositionPID(this->ID41->GetScopedName(), this->pid41);
			this->model->GetJointController()->SetPositionPID(this->ID12->GetScopedName(), this->pid12);
			this->model->GetJointController()->SetPositionPID(this->ID22->GetScopedName(), this->pid22);
			this->model->GetJointController()->SetPositionPID(this->ID32->GetScopedName(), this->pid32);
			this->model->GetJointController()->SetPositionPID(this->ID42->GetScopedName(), this->pid42);
				this->model->GetJointController()->SetPositionPID(this->ID13->GetScopedName(), this->pid13);
				this->model->GetJointController()->SetPositionPID(this->ID23->GetScopedName(), this->pid23);
				this->model->GetJointController()->SetPositionPID(this->ID33->GetScopedName(), this->pid33);
				this->model->GetJointController()->SetPositionPID(this->ID43->GetScopedName(), this->pid43);
				
		
		// Listen to the update event. This event is broadcast every
		// simulation iteration.
    	this->updateConnection = event::Events::ConnectWorldUpdateBegin(boost::bind(&roboControl::OnUpdate, this, _1));
    	std::cout << "*************************** roboControl ******************************" << std::endl;	
    	std::cout << "PID JAW:" <<" P:" << ProJaw <<" I:" << InteJaw << " D:"<< DereJaw <<std::endl;
    	std::cout << "PID Pitch1:" <<" P:" << ProPitch1 <<" I:" << IntePitch1 << " D:"<< DerePitch1 <<std::endl;
    	std::cout << "PID Pitch2:" <<" P:" << ProPitch2 <<" I:" << IntePitch2 << " D:"<< DerePitch2 <<std::endl;
    	
    	
    }
    
    // Called by the world update start event
	public: void OnUpdate(const common::UpdateInfo & /*_info*/)
	{	
		getJointPositions();
    	printJointPositions();

		if ( store == false)
		{
			store = Store();
		}
		if( store == true && home == false)
		{
			home = Home();
		}															
	}
	
    // Pointer to the model
    private: physics::ModelPtr model;
    // Pointer to the update event connection
    public: physics::JointPtr ID11;
    public: physics::JointPtr ID21;
    public: physics::JointPtr ID31;
    public: physics::JointPtr ID41;
    	public: physics::JointPtr ID12;
    	public: physics::JointPtr ID22;
    	public: physics::JointPtr ID32;
    	public: physics::JointPtr ID42;
    		public: physics::JointPtr ID13;
    		public: physics::JointPtr ID23;
    		public: physics::JointPtr ID33;
    		public: physics::JointPtr ID43;
    
    private: event::ConnectionPtr updateConnection;
    //Pointer to controller
    private: physics::JointController * ShokoControl;
	/// \brief A PID controller for the joint.
	private: common::PID pid11,pid21,pid31,pid41,
							pid12,pid22,pid32,pid42,
								pid13,pid23,pid33,pid43;

    void getJointPositions()
    {
    	math::Angle id11 = this->model->GetJoint("jaw11")-> GetAngle(0);
    	p11 = id11.Degree();
    		math::Angle id21 = this->model->GetJoint("jaw21")-> GetAngle(0);
    		p21 = id21.Degree();
				math::Angle id31 = this->model->GetJoint("jaw31")-> GetAngle(0);
    			p31 = id31.Degree();
    				math::Angle id41 = this->model->GetJoint("jaw41")-> GetAngle(0);
    				p41 = id41.Degree();
    	math::Angle id12 = this->model->GetJoint("pitch12")-> GetAngle(0);
    	p12 = id12.Degree();
    		math::Angle id22 = this->model->GetJoint("pitch22")-> GetAngle(0);
    		p22 = id22.Degree();
				math::Angle id32 = this->model->GetJoint("pitch32")-> GetAngle(0);
    			p32 = id32.Degree();
    				math::Angle id42 = this->model->GetJoint("pitch42")-> GetAngle(0);
    				p42 = id42.Degree();
    	math::Angle id13 = this->model->GetJoint("pitch13")-> GetAngle(0);
    	p13 = id13.Degree();
    		math::Angle id23 = this->model->GetJoint("pitch23")-> GetAngle(0);
    		p23 = id23.Degree();
				math::Angle id33 = this->model->GetJoint("pitch33")-> GetAngle(0);
    			p33 = id33.Degree();
    				math::Angle id43 = this->model->GetJoint("pitch43")-> GetAngle(0);
    				p43 = id43.Degree();
    }
    
    void  printJointPositions()
    {   				
    	getJointPositions();
    	//print current positions to terminal			
    	std::cout << "Store:" << store << " Home:" << home << " p11:"<< p11 << " p21:"<< p21 << " p31:"<< p31 << " p41:"<< p41
    				<< " p12:"<< p12 << " p22:"<< p22 << " p32:"<< p32 << " p42:"<< p42
    					<< " p13:"<< p13 << " p23:"<< p23 << " p33:"<< p33 << " p43:"<< p43 << std::endl;
    }
    
    void setJointsPosition(float d11, float d21, float d31, float d41,           //setJointsPosition(p11, p21, p31, p41, p12, p22, p32, p42, p13, p23, p33, p43);	
							float d12, float d22, float d32, float d42,	
	 							float d13, float d23, float d33, float d43)
	{
		float r11, r21, r31, r41, 		//jaw joints
				r12, r22, r32, r42, 	//first pitch joint
					r13, r23, r33, r43; 	//end pitch joint
		
		//void setJointPosition(ID11, IDj21, IDj31, ID41, ID12, ID22, ID32, ID42, ID13, ID23, ID33, ID43);
		//convert from degree to radians			
		r11 = d11 * 3.1415 / 180;
		r21 = d21 * 3.1415 / 180;
		r31 = d31 * 3.1415 / 180;
		r41 = d41 * 3.1415 / 180;
			r12 = d12 * 3.1415 / 180;
			r22 = d22 * 3.1415 / 180;
			r32 = d32 * 3.1415 / 180;
			r42 = d42 * 3.1415 / 180;
				r13 = d13 * 3.1415 / 180;
				r23 = d23 * 3.1415 / 180;
				r33 = d33 * 3.1415 / 180;
				r43 = d43 * 3.1415 / 180;
				
		//Set controller Target Positions
		this->model->GetJointController()->SetPositionTarget(this->ID11->GetScopedName(), r11);
		this->model->GetJointController()->SetPositionTarget(this->ID21->GetScopedName(), r21);
		this->model->GetJointController()->SetPositionTarget(this->ID31->GetScopedName(), r31);
		this->model->GetJointController()->SetPositionTarget(this->ID41->GetScopedName(), r41);
			this->model->GetJointController()->SetPositionTarget(this->ID12->GetScopedName(), r12);
			this->model->GetJointController()->SetPositionTarget(this->ID22->GetScopedName(), r22);
			this->model->GetJointController()->SetPositionTarget(this->ID32->GetScopedName(), r32);
			this->model->GetJointController()->SetPositionTarget(this->ID42->GetScopedName(), r42);
				this->model->GetJointController()->SetPositionTarget(this->ID13->GetScopedName(), r13);
				this->model->GetJointController()->SetPositionTarget(this->ID23->GetScopedName(), r23);
				this->model->GetJointController()->SetPositionTarget(this->ID33->GetScopedName(), r33);
				this->model->GetJointController()->SetPositionTarget(this->ID43->GetScopedName(), r43);
	}
	
	bool Store()
    {
    	setJointsPosition(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    	getJointPositions();
    	printJointPositions();
    	if( (p11 == 0) && (p21 == 0) && (p31 ==0) && (p41 == 0)		
			&& (p12 == 0) && (p22 == 0) && (p32 ==0) && (p42 == 0) 	
			&& (p13 == 0) && (p23 == 0) && (p33 ==0) && (p43 == 0) )
    		{
    			return true;
    		}
    	else
    		{
    			return false;
    		}
    }
    
	bool Home()
	{
		getJointPositions();
    	printJointPositions();
    	
    	//*****check leg1 position 
    	if(leg1 == false)
    		{
    			if ( (p11 == -1 || p11 == 0 || p11 == 1 )&&( (p12 == -21) || (p12 == -20) ||  (p12 == -19) )&&((p13 == -31) || (p13 == -30) || (p13 == -29)) )
    				{
    					pos3 = true;
    					if( pos3 == true)
    						{
    							leg1 = true;
    							std::cout << "Home: Leg1 Homed Position 3" << std::endl;
    						}
    				}
    			else if ( ( p11 == -1 || p11 == 0 || p11 == 1) && (p12 == 9 || p12 == 10 || p12 == 11) && (p13 == -31 || p13 == -30 || p13 == -29) )
    				{
    					pos2 = true;
    					std::cout << "Home: Leg1 Position Two Done" << std::endl;
    				}
				else if ( ( p11 == -1 || p11 == 0 || p11 == 1) && (p12 == 9 || p12 == 10 || p12 == 11) )
    				{
    					pos1 = true;
    					std::cout << "Home: Leg1 Position One Done" << std::endl;	
    				}
    			else if (check1 == false )
    				{
						pos1 = false;  
						pos2 = false;
						pos3 = false;
						check1 = true;
    				}
    		}
    	//*****check leg2 position 
    	if(leg2 == false)
    		{
    			if ( (p21 == -1 || p21 == 0 || p21 == 1 )&&( (p22 == -21) || (p22 == -20) ||  (p22 == -19) )&&((p23 == -31) || (p23 == -30) || (p23 == -29)) )
    				{
    					pos6 = true;
    					if( pos6 == true)
    						{
    							leg2 = true;
    							std::cout << "Home: Leg1 Homed Position 4" << std::endl;
    						}
    				}
    			else if ( ( p21 == -1 || p21 == 0 || p21 == 1) && (p22 == 19 || p22 == 20 || p22 == 21) && (p23 == -31 || p23 == -30 || p23 == -29) )
    				{
    					pos5 = true;
    					std::cout << "Home: Leg2 Position 5 Done" << std::endl;
    				}
    			else if ( ( p21 == -1 || p21 == 0 || p21 == 1) && (p22 == 19 || p22 == 20 || p22 == 21) )
    				{
    					pos4 = true;
    					std::cout << "Home: Leg2 Position 4 Done" << std::endl;	
    				}
    			else if (check1 == false)
    				{
						pos4 = false;  
						pos5 = false;
						pos6 = false;
						check2 = true; 
    				}
    		}
    	//*****check leg3 position 
    	if(leg3 == false)
    		{
    			
    			if ( (p31 == -1 || p31 == 0 || p31 == 1 )&&( (p32 == -21) || (p32 == -20) ||  (p32 == -19) )&&((p33 == -31) || (p33 == -30) || (p33 == -29)) )
    				{
    					pos9 = true;
    					if( pos9 == true)
    						{
    							leg3 = true;
    							std::cout << "Home: Leg1 Homed Position 9" << std::endl;
    						}
    				}
    			else if ( ( p31 == -1 || p31 == 0 || p31 == 1) && (p32 == 9 || p32 == 10 || p32 == 11) && (p33 == -31 || p33 == -30 || p33 == -29) )
    				{
    					pos8 = true;
    					std::cout << "Home: Leg3 Position 8 Done" << std::endl;
    				}
    			else if ( ( p31 == -1 || p31 == 0 || p31 == 1) && (p32 == 9|| p32 == 10 || p32 == 11) )
    				{
    					pos7 = true;
    					std::cout << "Home: Leg3 Position 7 Done" << std::endl;	
    				}
    			else if (check3 == false) 
    				{
						pos7 = false;  
						pos8 = false;
						pos9 = false;
						check3 = true;
    				}
    		}
    	//*****check leg4 position 
    	if(leg4 == false)
    		{
    			if ( (p41 == -1 || p41 == 0 || p41 == 1 )&&( (p42 == -21) || (p42 == -20) ||  (p42 == -19) )&&((p43 == -31) || (p43 == -30) || (p43 == -29)) )
    				{
    					pos12 = true;
    					if( pos12 == true)
    						{
    							leg4 = true;
    							std::cout << "Home: Leg1 Homed Position 12" << std::endl;
    						}
    				}
    			else if ( ( p41 == -1 || p41 == 0 || p41 == 1) && (p42 == 19 || p42 == 20 || p42 == 21) && (p43 == -31 || p13 == -30 || p43 == -29) )
    				{
    					pos11 = true;
    					std::cout << "Home: Leg4 Position 11 Done" << std::endl;
    				}
    			else if ( ( p41 == -1 || p41 == 0 || p41 == 1) && (p42 == 19 || p42 == 20 || p42 == 21) )
    				{
    					pos10 = true;
    					std::cout << "Home: Leg4 Position 10 Done" << std::endl;	
    				}
    			else if (check4 == false)
    				{
						pos10 = false;  
						pos11 = false;
						pos12 = false;
						check4 = true;
						
    				}
    		}
    	// Movements                         //	setJointsPosition(0, 0, 0, 0, -20, -20, -20, -20, -30, -30, -30, -30);
    	if( leg1 == false || leg3 == false)
    		{
    			if(leg1 == false)
    				{
    					if(pos2 == true && pos8 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, -20, p22, -20, p42, -30, p23, -30, p43);
    							std::cout << " ***********    pos3  **************** " << std::endl;
    						}
    					else if(pos1 == true && pos9 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, 10, p22, -20, p42, -30, p23, -30, p43);
    							std::cout << " ***********    pos2  **************** " << std::endl;	
    						}
    					else if(pos1 == false)
    						{
    							setJointsPosition(0, p21, p31, p41, 10, p22, 5, p42, p13, p23, p33, p43);	
    							std::cout << " ***********    pos1  **************** " << std::endl;
    						}
    				}
    			if(leg3 == false)
    				{
    					if(pos1 == true && pos8 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, 10, p22, -20, p42, p13, p23, -30, p43);	
    								std::cout << " ***********    pos9  **************** " << std::endl;
    						}
    					else if(pos1 == true && pos7 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, 10, p22, 10, p42, p13, p23, -30, p43);	
    							std::cout << " ***********    pos8  **************** " << std::endl;
    						}
    					else if(pos1 == true && pos7 == false )
    						{
    							setJointsPosition(0, p21, 0, p41, 10, p22, 10, p42, p13, p23, p33, p43);
    							std::cout << " ***********    pos7  **************** " << std::endl;	
    						}	
    				}
    		}
    		/*
    		if( leg1 == true && leg3 == true)
    		{
    			if(leg2 == false)
    				{
    					if(pos2 == true && pos8 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, -20, p22, -20, p42, -30, p23, -30, p43);
    							std::cout << " ***********    pos6  **************** " << std::endl;
    						}
    					else if(pos1 == true && pos9 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, -20, p22, -20, p42, -30, p23, -30, p43);
    							std::cout << " ***********    pos5  **************** " << std::endl;	
    						}
    					else if(pos4 == false)
    						{
    							setJointsPosition(0, p21, 0, p41, -20, p22, -20, p42, -30, p23, -30, p43);	
    							std::cout << " ***********    pos4  **************** " << std::endl;
    						}
    				}
    			if(leg4 == false)
    				{
    					if(pos1 == true && pos8 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, -20, p22, -20, p42, -30, p23, -30, p43);	
    								std::cout << " ***********    pos12  **************** " << std::endl;
    						}
    					else if(pos4 == true && pos10 == true)
    						{
    							setJointsPosition(0, p21, 0, p41, -20, p22, -20, p42, -30, p23, -30, p43);	
    							std::cout << " ***********    pos11  **************** " << std::endl;
    						}
    					else if(pos4 == true && pos10 == false )
    						{
    							setJointsPosition(0, p21, 0, p41, -20, p22, -20, p42, -30, p23, -30, p43);
    							std::cout << " ***********    pos10  **************** " << std::endl;	
    						}	
    				}
    		}
    		
    		
    		*/
    		
    	else if ( leg2 == false || leg4 == false )
    		{
    		
    		}
    	//return if home sequence finished
		if (leg1 == true && leg2 == true && leg3 == true && leg4 == true)
			{
				check1 = false;
				check2 = false;
				check2 = false;
				check2 = false;
				return true;	
			}
		else
			{
				return false;
			}	
			
		/*std::cout << "pos1:" << pos1 <<" pos2:"<< pos2 << " pos3:" << pos3 
					<<" pos4:" << pos4 <<" pos5:" << pos5 <<" pos6:" << pos6 
						<<" pos7:" << pos7 << " pos8:" << pos8 << " pos9:" << pos9 
							<< " pos10:" << pos10 << " pos11:" << pos11 << " pos12:" << pos12 << std::endl;	 */
    }//***** end Home() *************



};
  // Register this plugin with the simulator
  GZ_REGISTER_MODEL_PLUGIN(roboControl)
}


		//read sim time
		//common::Time time =  this->model->GetWorld()->GetSimTime();
		//double seconds = time.Double(); // get time in seconds double
/*
void IMUreadAndPrint()
{
		
		//read pose
 		math::Pose pose = this->model->GetWorldPose();
		math::Vector3 p(0, 0, 0);
		math::Vector3 r(0, 0, 0);
		p = pose.pos;
		r = pose.rot.GetAsEuler();
	
		double x = p.x; // x coordinate
		double y = p.y; // y coordinate
		double z = p.z; // z coordinate
		
		double aX = r.x; // x coordinate radian
		double bZ= r.y; // y coordinate radian
		double yY = r.z; // z coordinate radian
		
		//read linear velocity
		math::Vector3 lV = this->model->GetWorldLinearVel();
		double lVx = lV.x; // x coordinate
		double lVy = lV.y; // y coordinate
		double lVz = lV.z; // z coordinate
		
		//read linear acceleration  
		math::Vector3 lA = this->model->GetWorldLinearAccel();
		double lAx = lA.x; // x coordinate
		double lAy = lA.y; // y coordinate
		double lAz = lA.z; // z coordinate
	
		//read angular velocity 
		math::Vector3 aV = this->model->GetWorldAngularVel();
		double aVa = aV.x; // x coordinate
		double aVb = aV.y; // y coordinate
		double aVy = aV.z; // z coordinate
		
		//read angular acceleration
		math::Vector3 aA = this->model->GetWorldAngularAccel();
		double aAa = aA.x; // x coordinate
		double aAb = aA.y; // y coordinate
		double aAy = aA.z; // z coordinate
		
		//data stream output to terminal
		std::cout << " Time:" << seconds
					<< " ID11:" << aX << " ID12:" << bZ <<" ID13:"<< yY 
						<< " ID21 " << aVa << " ID22 " << aVb <<" ID23 "<< aVy	
							<< " ID31:" << aAa << " ID32:" << aAb <<" ID33:"<< aAy 
								<< " ID41:" << aAa << " ID42:" << aAb <<" ID43:"<< aAy << std::endl;
}
*/
